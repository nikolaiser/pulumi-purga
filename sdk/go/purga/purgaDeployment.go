// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package purga

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"internal"
)

type PurgaDeployment struct {
	pulumi.CustomResourceState

	ConfigArrayString pulumi.StringArrayMapOutput `pulumi:"configArrayString"`
	ConfigString      pulumi.StringMapOutput      `pulumi:"configString"`
	Flake             pulumi.StringOutput         `pulumi:"flake"`
	FlakeInput        pulumi.StringOutput         `pulumi:"flakeInput"`
	FlakeRevision     pulumi.StringOutput         `pulumi:"flakeRevision"`
	Host              pulumi.StringOutput         `pulumi:"host"`
}

// NewPurgaDeployment registers a new resource with the given unique name, arguments, and options.
func NewPurgaDeployment(ctx *pulumi.Context,
	name string, args *PurgaDeploymentArgs, opts ...pulumi.ResourceOption) (*PurgaDeployment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigArrayString == nil {
		return nil, errors.New("invalid value for required argument 'ConfigArrayString'")
	}
	if args.ConfigString == nil {
		return nil, errors.New("invalid value for required argument 'ConfigString'")
	}
	if args.Flake == nil {
		return nil, errors.New("invalid value for required argument 'Flake'")
	}
	if args.FlakeInput == nil {
		return nil, errors.New("invalid value for required argument 'FlakeInput'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PurgaDeployment
	err := ctx.RegisterResource("purga:index:PurgaDeployment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPurgaDeployment gets an existing PurgaDeployment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPurgaDeployment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PurgaDeploymentState, opts ...pulumi.ResourceOption) (*PurgaDeployment, error) {
	var resource PurgaDeployment
	err := ctx.ReadResource("purga:index:PurgaDeployment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PurgaDeployment resources.
type purgaDeploymentState struct {
}

type PurgaDeploymentState struct {
}

func (PurgaDeploymentState) ElementType() reflect.Type {
	return reflect.TypeOf((*purgaDeploymentState)(nil)).Elem()
}

type purgaDeploymentArgs struct {
	ConfigArrayString map[string][]string `pulumi:"configArrayString"`
	ConfigString      map[string]string   `pulumi:"configString"`
	Flake             string              `pulumi:"flake"`
	FlakeInput        string              `pulumi:"flakeInput"`
	Host              string              `pulumi:"host"`
}

// The set of arguments for constructing a PurgaDeployment resource.
type PurgaDeploymentArgs struct {
	ConfigArrayString pulumi.StringArrayMapInput
	ConfigString      pulumi.StringMapInput
	Flake             pulumi.StringInput
	FlakeInput        pulumi.StringInput
	Host              pulumi.StringInput
}

func (PurgaDeploymentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*purgaDeploymentArgs)(nil)).Elem()
}

type PurgaDeploymentInput interface {
	pulumi.Input

	ToPurgaDeploymentOutput() PurgaDeploymentOutput
	ToPurgaDeploymentOutputWithContext(ctx context.Context) PurgaDeploymentOutput
}

func (*PurgaDeployment) ElementType() reflect.Type {
	return reflect.TypeOf((**PurgaDeployment)(nil)).Elem()
}

func (i *PurgaDeployment) ToPurgaDeploymentOutput() PurgaDeploymentOutput {
	return i.ToPurgaDeploymentOutputWithContext(context.Background())
}

func (i *PurgaDeployment) ToPurgaDeploymentOutputWithContext(ctx context.Context) PurgaDeploymentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PurgaDeploymentOutput)
}

type PurgaDeploymentOutput struct{ *pulumi.OutputState }

func (PurgaDeploymentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PurgaDeployment)(nil)).Elem()
}

func (o PurgaDeploymentOutput) ToPurgaDeploymentOutput() PurgaDeploymentOutput {
	return o
}

func (o PurgaDeploymentOutput) ToPurgaDeploymentOutputWithContext(ctx context.Context) PurgaDeploymentOutput {
	return o
}

func (o PurgaDeploymentOutput) ConfigArrayString() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringArrayMapOutput { return v.ConfigArrayString }).(pulumi.StringArrayMapOutput)
}

func (o PurgaDeploymentOutput) ConfigString() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringMapOutput { return v.ConfigString }).(pulumi.StringMapOutput)
}

func (o PurgaDeploymentOutput) Flake() pulumi.StringOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringOutput { return v.Flake }).(pulumi.StringOutput)
}

func (o PurgaDeploymentOutput) FlakeInput() pulumi.StringOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringOutput { return v.FlakeInput }).(pulumi.StringOutput)
}

func (o PurgaDeploymentOutput) FlakeRevision() pulumi.StringOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringOutput { return v.FlakeRevision }).(pulumi.StringOutput)
}

func (o PurgaDeploymentOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *PurgaDeployment) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PurgaDeploymentInput)(nil)).Elem(), &PurgaDeployment{})
	pulumi.RegisterOutputType(PurgaDeploymentOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PurgaDeploymentArgs', 'PurgaDeployment']

@pulumi.input_type
class PurgaDeploymentArgs:
    def __init__(__self__, *,
                 config: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 flake: pulumi.Input[str],
                 flake_input: pulumi.Input[str],
                 host: pulumi.Input[str]):
        """
        The set of arguments for constructing a PurgaDeployment resource.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "flake", flake)
        pulumi.set(__self__, "flake_input", flake_input)
        pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def flake(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flake")

    @flake.setter
    def flake(self, value: pulumi.Input[str]):
        pulumi.set(self, "flake", value)

    @property
    @pulumi.getter(name="flakeInput")
    def flake_input(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flake_input")

    @flake_input.setter
    def flake_input(self, value: pulumi.Input[str]):
        pulumi.set(self, "flake_input", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)


class PurgaDeployment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 flake: Optional[pulumi.Input[str]] = None,
                 flake_input: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PurgaDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PurgaDeploymentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PurgaDeployment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PurgaDeploymentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PurgaDeploymentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 flake: Optional[pulumi.Input[str]] = None,
                 flake_input: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PurgaDeploymentArgs.__new__(PurgaDeploymentArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            if flake is None and not opts.urn:
                raise TypeError("Missing required property 'flake'")
            __props__.__dict__["flake"] = flake
            if flake_input is None and not opts.urn:
                raise TypeError("Missing required property 'flake_input'")
            __props__.__dict__["flake_input"] = flake_input
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            __props__.__dict__["flake_revision"] = None
        super(PurgaDeployment, __self__).__init__(
            'purga:index:PurgaDeployment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PurgaDeployment':
        """
        Get an existing PurgaDeployment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PurgaDeploymentArgs.__new__(PurgaDeploymentArgs)

        __props__.__dict__["config"] = None
        __props__.__dict__["flake"] = None
        __props__.__dict__["flake_input"] = None
        __props__.__dict__["flake_revision"] = None
        __props__.__dict__["host"] = None
        return PurgaDeployment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Mapping[str, str]]:
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def flake(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flake")

    @property
    @pulumi.getter(name="flakeInput")
    def flake_input(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flake_input")

    @property
    @pulumi.getter(name="flakeRevision")
    def flake_revision(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flake_revision")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "host")

